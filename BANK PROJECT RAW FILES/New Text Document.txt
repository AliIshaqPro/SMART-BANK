#include <iostream>
#include <string>
#include <windows.h>
#include <limits>
#include <sqlext.h>
#include <sqltypes.h>
#include <sql.h>


using namespace std;
// Function to insert values into the database

void showSQLError(unsigned int handleType, const SQLHANDLE& handle) {
    SQLWCHAR SQLState[1024];
    SQLWCHAR message[1024];
    if (SQL_SUCCESS == SQLGetDiagRec(handleType, handle, 1, SQLState, NULL, message, 1024, NULL))
        wcerr << L"SQL Error: " << message << L"\nSQL State: " << SQLState << endl;
}

bool insertValues(SQLHANDLE& sqlConnectionHandle, const wstring& name, const wstring& dob, SQLINTEGER idCardNumber, const wstring& address) {
    SQLWCHAR* insertSQL = (SQLWCHAR*)L"INSERT INTO `customerprofile` (`Name`, `DateofBirth`, `IDcardNumber`, `Address`) VALUES (?, ?, ?, ?)";
    SQLHANDLE sqlStatementHandle;
    SQLRETURN retcode;

    // Allocate statement handle
    SQLAllocHandle(SQL_HANDLE_STMT, sqlConnectionHandle, &sqlStatementHandle);

    // Prepare the SQL statement
    retcode = SQLPrepareW(sqlStatementHandle, insertSQL, SQL_NTS);
    if (retcode != SQL_SUCCESS) {
        wcerr << L"Failed to prepare SQL statement for insert." << endl;
        showSQLError(SQL_HANDLE_STMT, sqlStatementHandle);
        SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
        return false;
    }

    // Bind parameters to the statement
    SQLLEN nameLength = SQL_NTS; // Assuming Name is null-terminated string
    SQLLEN dobLength = SQL_NTS;  // Assuming Date of Birth is null-terminated string
    SQLLEN addressLength = SQL_NTS; // Assuming Address is null-terminated string

    retcode = SQLBindParameter(sqlStatementHandle, 1, SQL_PARAM_INPUT, SQL_C_WCHAR, SQL_WVARCHAR, 0, 0, (SQLPOINTER)name.c_str(), name.length() * sizeof(wchar_t), &nameLength);
    retcode = SQLBindParameter(sqlStatementHandle, 2, SQL_PARAM_INPUT, SQL_C_WCHAR, SQL_WVARCHAR, 0, 0, (SQLPOINTER)dob.c_str(), dob.length() * sizeof(wchar_t), &dobLength);
    retcode = SQLBindParameter(sqlStatementHandle, 3, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &idCardNumber, 0, NULL);
    retcode = SQLBindParameter(sqlStatementHandle, 4, SQL_PARAM_INPUT, SQL_C_WCHAR, SQL_WVARCHAR, 0, 0, (SQLPOINTER)address.c_str(), address.length() * sizeof(wchar_t), &addressLength);

    // Execute the SQL statement
    retcode = SQLExecute(sqlStatementHandle);
    if (retcode != SQL_SUCCESS) {
        wcerr << L"Failed to insert data into the table." << endl;
        showSQLError(SQL_HANDLE_STMT, sqlStatementHandle);
        SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
        return false;
    }

    // Free statement handle
    SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
    return true;
}
// Function to display all records from the customerProfile table
void displayCustomerProfile(SQLHANDLE& sqlConnectionHandle) {
    SQLWCHAR* selectSQL = (SQLWCHAR*)L"SELECT * FROM `customerProfile`";
    SQLHANDLE sqlStatementHandle;
    SQLRETURN retcode;

    // Allocate statement handle
    SQLAllocHandle(SQL_HANDLE_STMT, sqlConnectionHandle, &sqlStatementHandle);

    // Prepare the SQL statement
    retcode = SQLPrepareW(sqlStatementHandle, selectSQL, SQL_NTS);
    if (retcode != SQL_SUCCESS) {
        wcerr << L"Failed to prepare SQL statement for select." << endl;
        showSQLError(SQL_HANDLE_STMT, sqlStatementHandle);
        SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
        return;
    }

    // Execute the SQL statement
    retcode = SQLExecute(sqlStatementHandle);
    if (retcode != SQL_SUCCESS) {
        wcerr << L"Failed to execute SQL statement for select." << endl;
        showSQLError(SQL_HANDLE_STMT, sqlStatementHandle);
        SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
        return;
    }

    // Fetch and display results
    SQLLEN nameLength, dobLength, idCardNumber, addressLength;
    wchar_t name[256], dob[256], address[256];
    wcout << "Customer Profile Table:" << endl;
    while (SQLFetch(sqlStatementHandle) == SQL_SUCCESS) {
        SQLGetData(sqlStatementHandle, 1, SQL_C_WCHAR, name, sizeof(name), &nameLength);
        SQLGetData(sqlStatementHandle, 2, SQL_C_WCHAR, dob, sizeof(dob), &dobLength);
        SQLGetData(sqlStatementHandle, 3, SQL_C_LONG, &idCardNumber, 0, &idCardNumber);
        SQLGetData(sqlStatementHandle, 4, SQL_C_WCHAR, address, sizeof(address), &addressLength);
        wcout << L"Name: " << name << L", Date of Birth: " << dob << L", ID Card Number: " << idCardNumber << L", Address: " << address << endl;
    }

    // Free statement handle
    SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
}

int main() {
    //=============================================================================================================
    //Connecting with DataBase
    //=============================================================================================================
    // Declare handles and variables
    SQLHANDLE sqlEnvHandle;
    SQLHANDLE sqlConnectionHandle;
    SQLRETURN retcode;

    // Initialize handles
    SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &sqlEnvHandle);
    SQLSetEnvAttr(sqlEnvHandle, SQL_ATTR_ODBC_VERSION, (SQLPOINTER)SQL_OV_ODBC3, 0);
    SQLAllocHandle(SQL_HANDLE_DBC, sqlEnvHandle, &sqlConnectionHandle);

    // Connection string
    SQLWCHAR* connectionString = (SQLWCHAR*)L"DRIVER={MySQL ODBC 8.4 Unicode Driver};SERVER=localhost;DATABASE=smartbankpakistan;USER=root;PASSWORD=Maasaa229$;OPTION=3;";

    // Connect to the database
    retcode = SQLDriverConnectW(sqlConnectionHandle, NULL, connectionString, SQL_NTS, NULL, 0, NULL, SQL_DRIVER_NOPROMPT);

    // Handle connection result
    if (retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO) {
        wcout << L"               Welcome to The Smart Bank Of Pakistan " << endl << endl;

        //=============================================================================================================
        // Inserting values into Customer Profile table
        //=============================================================================================================
       // Prompt the user for input
        wcout << L"Enter name: ";
        wstring name;
        wcin >> name;

        wcout << L"Enter date of birth (YYYY-MM-DD): ";
        wstring dob;
        wcin >> dob;

        wcout << L"Enter ID card number: ";
        SQLINTEGER idCardNumber;
        cin >> idCardNumber;

        wcout << L"Enter address: ";
        wstring address;
        wcin.ignore(); // Ignore the newline character in the input buffer
        getline(wcin, address);

        // Call the function to insert values
        if (insertValues(sqlConnectionHandle, name, dob, idCardNumber, address)) {
            wcout << L"Data inserted successfully." << endl;
        }
        //=============================================================================================================
        // Displaying customer profile table
        //=============================================================================================================
        displayCustomerProfile(sqlConnectionHandle);
        //=============================================================================================================


        //=============================================================================================================

        // Disconnect
        SQLDisconnect(sqlConnectionHandle);

        // Free handles
        SQLFreeHandle(SQL_HANDLE_DBC, sqlConnectionHandle);
        SQLFreeHandle(SQL_HANDLE_ENV, sqlEnvHandle);
        system("pause");
    }
    else {
        wcerr << L"Failed to connect to Open \n Please Check Your Network Connection." << endl << endl;
        showSQLError(SQL_HANDLE_DBC, sqlConnectionHandle);
    }
    return 0;
}
https://youtube.com/shorts/L4YAslama18?si=rRFDMGn3WzCFmI1-
