#include <windows.h>
#include <sql.h>
#include <sqlext.h>
#include <iostream>
#include <string>
using namespace std;
SQLHANDLE sqlEnvHandle;
SQLHANDLE sqlConnHandle;
SQLHANDLE sqlStmtHandle;
SQLRETURN retcode;
string welcome = "=============== WELCOME TO THE SMART BANK OF PAKISTAN ====================\n\n";
void showSQLError(unsigned int handleType, const SQLHANDLE& handle) {
    SQLWCHAR SQLState[1024];
    SQLWCHAR message[1024];
    if (SQL_SUCCESS == SQLGetDiagRec(handleType, handle, 1, SQLState, NULL, message, 1024, NULL))
        wcerr << L"SQL Error: " << message << L"\nSQL State: " << SQLState << endl;
}

void initDatabase() {
    // Allocate environment handle
    SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &sqlEnvHandle);
    // Set the ODBC version environment attribute
    SQLSetEnvAttr(sqlEnvHandle, SQL_ATTR_ODBC_VERSION, (void*)SQL_OV_ODBC3, 0);
    // Allocate connection handle
    SQLAllocHandle(SQL_HANDLE_DBC, sqlEnvHandle, &sqlConnHandle);
    // Set login timeout to 5 seconds
    SQLSetConnectAttr(sqlConnHandle, SQL_LOGIN_TIMEOUT, (SQLPOINTER)5, 0);

    /*// Connection string
	SQLWCHAR retconstring[1024];
	SQLWCHAR* connectionString = (SQLWCHAR*)L"DRIVER={MySQL ODBC 8.4 Unicode Driver};SERVER=localhost;DATABASE=smartbankpakistan;USER=root;PASSWORD=Maasaa229$;OPTION=3;";*/

    // Connect to the database
    SQLWCHAR retConString[1024];
    switch (SQLDriverConnect(sqlConnHandle, NULL,
        (SQLWCHAR*)L"DRIVER={MySQL ODBC 8.4 Unicode Driver};SERVER=localhost;DATABASE=smartbankpakistan;USER=root;PASSWORD=Maasaa229$;OPTION=3;",
        SQL_NTS, retConString, 1024, NULL, SQL_DRIVER_NOPROMPT)) {

    case SQL_SUCCESS:
    case SQL_SUCCESS_WITH_INFO:
        std::wcout << L"=============== WELCOME TO THE SMART BANK OF PAKISTAN ====================\n\n" << std::endl;
        break;
    case SQL_INVALID_HANDLE:
    case SQL_ERROR:
        std::wcerr << L"Could not connect to the database." << std::endl;
        break;
    default:
        break;
    }
}


void cleanupDatabase() {
    // Free handles and disconnect
    SQLFreeHandle(SQL_HANDLE_STMT, sqlStmtHandle);
    SQLDisconnect(sqlConnHandle);
    SQLFreeHandle(SQL_HANDLE_DBC, sqlConnHandle);
    SQLFreeHandle(SQL_HANDLE_ENV, sqlEnvHandle);
}/*
bool transferMoney(SQLINTEGER fromAccount, SQLINTEGER toAccount, SQLDOUBLE amount) {
    SQLWCHAR* transferSQL = (SQLWCHAR*)L"UPDATE accounts SET balance = balance - ? WHERE account_number = ?";
    SQLWCHAR* receiveSQL = (SQLWCHAR*)L"UPDATE accounts SET balance = balance + ? WHERE account_number = ?";

    SQLAllocHandle(SQL_HANDLE_STMT, sqlConnHandle, &sqlStmtHandle);

    // Withdraw from sender
    SQLPrepareW(sqlStmtHandle, transferSQL, SQL_NTS);
    SQLBindParameter(sqlStmtHandle, 1, SQL_PARAM_INPUT, SQL_C_DOUBLE, SQL_DOUBLE, 0, 0, &amount, 0, NULL);
    SQLBindParameter(sqlStmtHandle, 2, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &fromAccount, 0, NULL);
    if (SQLExecute(sqlStmtHandle) != SQL_SUCCESS) {
        showSQLError(SQL_HANDLE_STMT, sqlStmtHandle);
        return false;
    }

    // Deposit to receiver
    SQLPrepareW(sqlStmtHandle, receiveSQL, SQL_NTS);
    SQLBindParameter(sqlStmtHandle, 1, SQL_PARAM_INPUT, SQL_C_DOUBLE, SQL_DOUBLE, 0, 0, &amount, 0, NULL);
    SQLBindParameter(sqlStmtHandle, 2, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &toAccount, 0, NULL);
    if (SQLExecute(sqlStmtHandle) != SQL_SUCCESS) {
        showSQLError(SQL_HANDLE_STMT, sqlStmtHandle);
        return false;
    }

    SQLFreeHandle(SQL_HANDLE_STMT, sqlStmtHandle);
    return true;
}
bool loadMobileCredit(SQLINTEGER accountNumber, std::wstring mobileNumber, SQLDOUBLE amount) {
    SQLWCHAR* loadSQL = (SQLWCHAR*)L"UPDATE accounts SET balance = balance - ? WHERE account_number = ?";
    SQLAllocHandle(SQL_HANDLE_STMT, sqlConnHandle, &sqlStmtHandle);

    // Deduct from account
    SQLPrepareW(sqlStmtHandle, loadSQL, SQL_NTS);
    SQLBindParameter(sqlStmtHandle, 1, SQL_PARAM_INPUT, SQL_C_DOUBLE, SQL_DOUBLE, 0, 0, &amount, 0, NULL);
    SQLBindParameter(sqlStmtHandle, 2, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &accountNumber, 0, NULL);
    if (SQLExecute(sqlStmtHandle) != SQL_SUCCESS) {
        showSQLError(SQL_HANDLE_STMT, sqlStmtHandle);
        return false;
    }

    // Simulate loading mobile credit (e.g., call to mobile service API)

    SQLFreeHandle(SQL_HANDLE_STMT, sqlStmtHandle);
    return true;
}
bool payBill(SQLINTEGER accountNumber, std::wstring billerName, SQLDOUBLE amount) {
    SQLWCHAR* billSQL = (SQLWCHAR*)L"UPDATE accounts SET balance = balance - ? WHERE account_number = ?";
    SQLAllocHandle(SQL_HANDLE_STMT, sqlConnHandle, &sqlStmtHandle);

    // Deduct from account
    SQLPrepareW(sqlStmtHandle, billSQL, SQL_NTS);
    SQLBindParameter(sqlStmtHandle, 1, SQL_PARAM_INPUT, SQL_C_DOUBLE, SQL_DOUBLE, 0, 0, &amount, 0, NULL);
    SQLBindParameter(sqlStmtHandle, 2, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &accountNumber, 0, NULL);
    if (SQLExecute(sqlStmtHandle) != SQL_SUCCESS) {
        showSQLError(SQL_HANDLE_STMT, sqlStmtHandle);
        return false;
    }

    // Simulate bill payment (e.g., call to biller service API)

    SQLFreeHandle(SQL_HANDLE_STMT, sqlStmtHandle);
    return true;
}
bool displayTransactionHistory(SQLINTEGER accountNumber) {
    SQLWCHAR* historySQL = (SQLWCHAR*)L"SELECT * FROM transactions WHERE account_number = ?";
    SQLAllocHandle(SQL_HANDLE_STMT, sqlConnHandle, &sqlStmtHandle);

    // Prepare and execute query
    SQLPrepareW(sqlStmtHandle, historySQL, SQL_NTS);
    SQLBindParameter(sqlStmtHandle, 1, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &accountNumber, 0, NULL);
    if (SQLExecute(sqlStmtHandle) != SQL_SUCCESS) {
        showSQLError(SQL_HANDLE_STMT, sqlStmtHandle);
        return false;
    }

    // Fetch and display results
    SQLINTEGER transactionID{};
    SQLWCHAR transactionDetail[256]{};
    SQLDOUBLE amount{};
    SQLLEN indicator{};

    SQLBindCol(sqlStmtHandle, 1, SQL_C_LONG, &transactionID, 0, &indicator);
    SQLBindCol(sqlStmtHandle, 2, SQL_C_WCHAR, transactionDetail, sizeof(transactionDetail), &indicator);
    SQLBindCol(sqlStmtHandle, 3, SQL_C_DOUBLE, &amount, 0, &indicator);

    while (SQLFetch(sqlStmtHandle) == SQL_SUCCESS) {
        std::wcout << L"Transaction ID: " << transactionID
            << L", Detail: " << transactionDetail
            << L", Amount: " << amount << std::endl;
    }

    SQLFreeHandle(SQL_HANDLE_STMT, sqlStmtHandle);
    return true;
}*/
int main() {
    // Initialize database connection
    initDatabase();

   /* // Example operations
    transferMoney(12345, 67890, 1000.0);
    loadMobileCredit(12345, L"03451234567", 500.0);
    payBill(12345, L"Electric Company", 1500.0);
    displayTransactionHistory(12345);*/

    // Clean up and disconnect
    cleanupDatabase();
    return 0;
}
