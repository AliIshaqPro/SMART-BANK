bool deleteRecordByIDCardNumber(SQLHANDLE& sqlConnectionHandle, SQLINTEGER idCardNumber) {
	SQLWCHAR* deleteSQL = (SQLWCHAR*)L"DELETE FROM personalinformation WHERE IDCardNumber = ?";
	SQLHANDLE sqlStatementHandle;
	SQLRETURN retcode;

	// Allocate statement handle
	SQLAllocHandle(SQL_HANDLE_STMT, sqlConnectionHandle, &sqlStatementHandle);

	// Prepare the SQL statement
	retcode = SQLPrepareW(sqlStatementHandle, deleteSQL, SQL_NTS);
	if (retcode != SQL_SUCCESS) {
		wcerr << L"Failed to prepare SQL statement for delete." << endl;
		showSQLError(SQL_HANDLE_STMT, sqlStatementHandle);
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Bind parameter to the statement
	retcode = SQLBindParameter(sqlStatementHandle, 1, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &idCardNumber, 0, NULL);
	if (retcode != SQL_SUCCESS) {
		wcerr << L"Failed to bind parameter for delete." << endl;
		showSQLError(SQL_HANDLE_STMT, sqlStatementHandle);
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Execute the SQL statement
	retcode = SQLExecute(sqlStatementHandle);
	if (retcode != SQL_SUCCESS) {
		wcerr << L"Failed to delete data from the table." << endl;
		showSQLError(SQL_HANDLE_STMT, sqlStatementHandle);
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Free statement handle
	SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
	return true;
};



bool WithdrawAmount(SQLHANDLE& sqlConnectionHandle, wstring accountnumber, double deposit) {
	SQLWCHAR* selectSQL = (SQLWCHAR*)L"SELECT `balance` FROM `accountmgt` WHERE `accountnumber` = ?";
	SQLWCHAR* updateSQL = (SQLWCHAR*)L"UPDATE `accountmgt` SET `balance` = ? WHERE `accountnumber` = ?";
	SQLHANDLE sqlStatementHandle;
	SQLRETURN retcode;
	double currentbalance;

	// Allocate statement handle for select
	retcode = SQLAllocHandle(SQL_HANDLE_STMT, sqlConnectionHandle, &sqlStatementHandle);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to allocate statement handle." << endl;
		return false;
	}

	// Prepare the select SQL statement
	retcode = SQLPrepareW(sqlStatementHandle, selectSQL, SQL_NTS);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to prepare the SQL statement." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Bind account number parameter for select
	SQLLEN accountnumberLength = SQL_NTS;
	retcode = SQLBindParameter(sqlStatementHandle, 1, SQL_PARAM_INPUT, SQL_C_WCHAR, SQL_WVARCHAR, 0, 0, (SQLPOINTER)accountnumber.c_str(), accountnumber.length() * sizeof(wchar_t), &accountnumberLength);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to bind account number parameter." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Execute the select statement
	retcode = SQLExecute(sqlStatementHandle);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to execute the SQL statement." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Fetch the current balance
	retcode = SQLFetch(sqlStatementHandle);
	if (retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO) {
		retcode = SQLGetData(sqlStatementHandle, 1, SQL_C_DOUBLE, &currentbalance, 0, NULL);
		if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
			wcerr << L"Failed to get data." << endl;
			SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
			return false;
		}
	}
	else {
		wcerr << L"Account number not found." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Free the statement handle for select
	SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);

	// Calculate the new balance
	double newbalance;
	if (currentbalance < deposit) {
		wcerr << L"Insufficient balance for withdrawal." << endl;
		return false;
	}
	else {
		newbalance = currentbalance - deposit;
	}

	// Allocate statement handle for update
	retcode = SQLAllocHandle(SQL_HANDLE_STMT, sqlConnectionHandle, &sqlStatementHandle);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to allocate statement handle." << endl;
		return false;
	}

	// Prepare the update SQL statement
	retcode = SQLPrepareW(sqlStatementHandle, updateSQL, SQL_NTS);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to prepare the SQL statement." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Bind the new balance parameter for update
	retcode = SQLBindParameter(sqlStatementHandle, 1, SQL_PARAM_INPUT, SQL_C_DOUBLE, SQL_DOUBLE, 0, 0, &newbalance, 0, NULL);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to bind new balance parameter." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Bind account number parameter for update
	retcode = SQLBindParameter(sqlStatementHandle, 2, SQL_PARAM_INPUT, SQL_C_WCHAR, SQL_WVARCHAR, 0, 0, (SQLPOINTER)accountnumber.c_str(), accountnumber.length() * sizeof(wchar_t), &accountnumberLength);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to bind account number parameter." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Execute the update statement
	retcode = SQLExecute(sqlStatementHandle);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to execute the SQL statement." << endl;

		// Retrieve detailed error message
		SQLWCHAR sqlState[1024];
		SQLWCHAR message[1024];
		SQLINTEGER nativeError;
		SQLSMALLINT textLength;

		SQLGetDiagRec(SQL_HANDLE_STMT, sqlStatementHandle, 1, sqlState, &nativeError, message, sizeof(message) / sizeof(SQLWCHAR), &textLength);
		wcerr << L"SQLSTATE: " << sqlState << L", Message: " << message << endl;

		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Free statement handle
	SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
	return true;
}

bool depositAmount(SQLHANDLE& sqlConnectionHandle, SQLINTEGER accountnumber, SQLINTEGER deposit) {
	SQLWCHAR* selectSQL = (SQLWCHAR*)L"SELECT `balance` FROM `accountmgt` WHERE `accountnumber` = ?";
	SQLWCHAR* updateSQL = (SQLWCHAR*)L"UPDATE `accountmgt` SET `balance` = ? WHERE `accountnumber` = ?";
	SQLHANDLE sqlStatementHandle;
	SQLRETURN retcode;


	// Allocate statement handle for select
	retcode = SQLAllocHandle(SQL_HANDLE_STMT, sqlConnectionHandle, &sqlStatementHandle);
	if (retcode != SQL_SUCCESS) {
		wcerr << L"Failed to allocate statement handle." << endl;
		return false;
	}

	// Prepare the select SQL statement
	retcode = SQLPrepareW(sqlStatementHandle, selectSQL, SQL_NTS);
	error();

	// Bind ID card number parameter for select
	retcode = SQLBindParameter(sqlStatementHandle, 1, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &balance, 0, NULL);
	error();

	// Execute the select statement
	retcode = SQLExecute(sqlStatementHandle);
	error();

	// Fetch the current pincode
	retcode = SQLFetch(sqlStatementHandle);
	if (retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO) {
		retcode = SQLGetData(sqlStatementHandle, 1, SQL_C_LONG, &currentbalance, 0, NULL);
		error();
	}
	else {
		wcerr << L"ID card number not found." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Free the statement handle for select
	SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);

	// Calculate the new pincode
	SQLINTEGER newbalance;
	if (currentbalance < deposit) {
		wcerr << L"Insufficient pincode for withdrawal." << endl;
		return false;
	}
	else {
		newbalance = currentbalance + deposit;
	}



	// Allocate statement handle for update
	retcode = SQLAllocHandle(SQL_HANDLE_STMT, sqlConnectionHandle, &sqlStatementHandle);
	if (retcode != SQL_SUCCESS) {
		wcerr << L"Failed to allocate statement handle." << endl;
		return false;
	}

	// Prepare the update SQL statement
	retcode = SQLPrepareW(sqlStatementHandle, updateSQL, SQL_NTS);
	error();

	// Bind the new pincode parameter for update
	retcode = SQLBindParameter(sqlStatementHandle, 1, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &newbalance, 0, NULL);
	error();

	// Bind ID card number parameter for update
	retcode = SQLBindParameter(sqlStatementHandle, 2, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &accountnumber, 0, NULL);
	error();

	// Execute the update statement
	retcode = SQLExecute(sqlStatementHandle);
	error();

	// Free statement handle
	SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
	return true;
};

bool create_account(SQLHANDLE& sqlConnectionHandle, wstring& name, wstring& dob, SQLINTEGER idCardNumber, wstring& accounttype, wstring& password, SQLINTEGER pincode, wstring& accountnumber) {
	SQLWCHAR* insertSQL = (SQLWCHAR*)L"INSERT INTO `personalinformation` (`Name`, `dateofbirth`, `CNIC`, `accounttype`, `password`, `pincode`, `accountnumber`) VALUES (?, ?, ?, ?, ?, ?, ?)";
	SQLHANDLE sqlStatementHandle;
	SQLRETURN retcode;

	// Allocate statement handle
	retcode = SQLAllocHandle(SQL_HANDLE_STMT, sqlConnectionHandle, &sqlStatementHandle);
	if (retcode != SQL_SUCCESS) {
		wcerr << L"Failed to allocate statement handle." << endl;
		return false;
	}

	// Prepare the SQL statement
	retcode = SQLPrepareW(sqlStatementHandle, insertSQL, SQL_NTS);
	error();

	// Bind parameters to the statement
	SQLLEN nameLength = SQL_NTS;
	SQLLEN dobLength = SQL_NTS;
	SQLLEN accounttypeLength = SQL_NTS;
	SQLLEN passwordLength = SQL_NTS;
	SQLLEN accountnumberLength = SQL_NTS;

	retcode = SQLBindParameter(sqlStatementHandle, 1, SQL_PARAM_INPUT, SQL_C_WCHAR, SQL_WVARCHAR, 0, 0, (SQLPOINTER)name.c_str(), name.length() * sizeof(wchar_t), &nameLength);
	retcode = SQLBindParameter(sqlStatementHandle, 2, SQL_PARAM_INPUT, SQL_C_WCHAR, SQL_WVARCHAR, 0, 0, (SQLPOINTER)dob.c_str(), dob.length() * sizeof(wchar_t), &dobLength);
	retcode = SQLBindParameter(sqlStatementHandle, 3, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &idCardNumber, 0, NULL);
	retcode = SQLBindParameter(sqlStatementHandle, 4, SQL_PARAM_INPUT, SQL_C_WCHAR, SQL_WVARCHAR, 0, 0, (SQLPOINTER)accounttype.c_str(), accounttype.length() * sizeof(wchar_t), &accounttypeLength);
	retcode = SQLBindParameter(sqlStatementHandle, 5, SQL_PARAM_INPUT, SQL_C_WCHAR, SQL_WVARCHAR, 0, 0, (SQLPOINTER)password.c_str(), password.length() * sizeof(wchar_t), &passwordLength);
	retcode = SQLBindParameter(sqlStatementHandle, 6, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &pincode, 0, NULL);
	retcode = SQLBindParameter(sqlStatementHandle, 7, SQL_PARAM_INPUT, SQL_C_WCHAR, SQL_WVARCHAR, 0, 0, (SQLPOINTER)accountnumber.c_str(), accountnumber.length() * sizeof(wchar_t), &accountnumberLength);

	// Check retcode after each SQLBindParameter call for error handling

	// Execute the SQL statement
	retcode = SQLExecute(sqlStatementHandle);
	error();

	// Free statement handle
	SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
	return true;
};
bool accountmgt(SQLHANDLE& sqlConnectionHandle, wstring& accountnumber, SQLINTEGER pincode, wstring& accountsmt, double balance) {
	SQLWCHAR* insertSQL = (SQLWCHAR*)L"INSERT INTO `accountmgt` (`accountnumber`, `pincode`, `accountsmt`, `balance`) VALUES (?, ?, ?, ?)";
	SQLHANDLE sqlStatementHandle;
	SQLRETURN retcode;

	// Allocate statement handle
	retcode = SQLAllocHandle(SQL_HANDLE_STMT, sqlConnectionHandle, &sqlStatementHandle);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to allocate statement handle." << endl;
		return false;
	}

	// Prepare the SQL statement
	retcode = SQLPrepareW(sqlStatementHandle, insertSQL, SQL_NTS);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to prepare the SQL statement." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Bind parameters to the statement
	SQLLEN accountnumberLength = SQL_NTS;
	SQLLEN accountsmtLength = SQL_NTS;
	SQLLEN balanceLength = 0; // Not required for numeric data types

	retcode = SQLBindParameter(sqlStatementHandle, 1, SQL_PARAM_INPUT, SQL_C_WCHAR, SQL_WVARCHAR, 0, 0, (SQLPOINTER)accountnumber.c_str(), accountnumber.length() * sizeof(wchar_t), &accountnumberLength);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to bind accountnumber parameter." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	retcode = SQLBindParameter(sqlStatementHandle, 2, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 0, 0, &pincode, 0, NULL);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to bind pincode parameter." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	retcode = SQLBindParameter(sqlStatementHandle, 3, SQL_PARAM_INPUT, SQL_C_WCHAR, SQL_WVARCHAR, 0, 0, (SQLPOINTER)accountsmt.c_str(), accountsmt.length() * sizeof(wchar_t), &accountsmtLength);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to bind accountsmt parameter." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	retcode = SQLBindParameter(sqlStatementHandle, 4, SQL_PARAM_INPUT, SQL_C_DOUBLE, SQL_DOUBLE, 0, 0, &balance, 0, &balanceLength);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to bind balance parameter." << endl;
		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Execute the SQL statement
	retcode = SQLExecute(sqlStatementHandle);
	if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
		wcerr << L"Failed to execute the SQL statement." << endl;

		// Retrieve detailed error message
		SQLWCHAR sqlState[1024];
		SQLWCHAR message[1024];
		SQLINTEGER nativeError;
		SQLSMALLINT textLength;

		SQLGetDiagRec(SQL_HANDLE_STMT, sqlStatementHandle, 1, sqlState, &nativeError, message, sizeof(message) / sizeof(SQLWCHAR), &textLength);
		wcerr << L"SQLSTATE: " << sqlState << L", Message: " << message << endl;

		SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
		return false;
	}

	// Free statement handle
	SQLFreeHandle(SQL_HANDLE_STMT, sqlStatementHandle);
	return true;
};

